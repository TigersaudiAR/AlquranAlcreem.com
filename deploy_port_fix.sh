#!/bin/bash

# ูุฐุง ุงูููู ูุชุนุงูู ูุน ูุดููุฉ ุชูุฌูู ุงูููุงูุฐ ูู ุชุทุจูู Replit

echo "=== ุฅุตูุงุญ ูุดููุฉ ุงูููุงูุฐ ==="

# ุฅููุงู ุฌููุน ุงูุนูููุงุช ุงูุญุงููุฉ
echo "1. ุฅููุงู ุงูุนูููุงุช ุงูุญุงููุฉ..."
pkill -f "node" || echo "ูุง ุชูุฌุฏ ุนูููุงุช node ูุฅููุงููุง"
pkill -f "tsx" || echo "ูุง ุชูุฌุฏ ุนูููุงุช tsx ูุฅููุงููุง"
sleep 2

# ุฅูุดุงุก ููู ุงูุฅุนุงุฏุฉ ุงูุชูุฌูู ููููุงูุฐ
echo "2. ุฅูุดุงุก ููู ุฅุนุงุฏุฉ ุชูุฌูู ุงูููุงูุฐ..."
cat > port_redirect.js << 'EOL'
const http = require('http');
const net = require('net');

// ุงููููุฐ ุงูุฐู ูุฌุจ ุฃู ูุณุชูุน ุนููู Replit
const REPLIT_EXPECTED_PORT = 5000;

// ุงููููุฐ ุงูุฐู ูุณุชูุน ุนููู ุงูุฎุงุฏู ุงููุนูู
const ACTUAL_SERVER_PORT = 3333;

console.log(`ุฅูุดุงุก ุฅุนุงุฏุฉ ุชูุฌูู ูู ุงููููุฐ ${REPLIT_EXPECTED_PORT} ุฅูู ุงููููุฐ ${ACTUAL_SERVER_PORT}`);

// ุฅูุดุงุก ุฎุงุฏู ุจุณูุท ูุชูุฌูู ุงูุทูุจุงุช
const server = http.createServer((req, res) => {
  const options = {
    hostname: 'localhost',
    port: ACTUAL_SERVER_PORT,
    path: req.url,
    method: req.method,
    headers: req.headers
  };

  console.log(`ุชูุฌูู ุทูุจ: ${req.method} ${req.url} -> localhost:${ACTUAL_SERVER_PORT}${req.url}`);

  const proxy = http.request(options, (proxyRes) => {
    res.writeHead(proxyRes.statusCode, proxyRes.headers);
    proxyRes.pipe(res, { end: true });
  });

  req.pipe(proxy, { end: true });

  proxy.on('error', (err) => {
    console.error(`ุฎุทุฃ ูู ุงูุชูุฌูู: ${err.message}`);
    res.writeHead(502);
    res.end(`ุฎุทุฃ ูู ุงูุงุชุตุงู ุจุงูุฎุงุฏู ุงูุฏุงุฎูู: ${err.message}`);
  });
});

// ูุนุงูุฌุฉ ุงูุงุชุตุงูุงุช ุงููุณุชูุฑุฉ (WebSockets)
server.on('upgrade', (req, socket, head) => {
  console.log(`ุชูุฌูู ุงุชุตุงู ูุณุชูุฑ WebSocket -> localhost:${ACTUAL_SERVER_PORT}`);

  const proxy = net.connect(ACTUAL_SERVER_PORT, 'localhost', () => {
    proxy.write(head);
    socket.pipe(proxy).pipe(socket);
  });

  proxy.on('error', (err) => {
    console.error(`ุฎุทุฃ ูู ุชูุฌูู WebSocket: ${err.message}`);
    socket.end();
  });
});

// ุจุฏุก ุงูุงุณุชูุงุน
server.listen(REPLIT_EXPECTED_PORT, '0.0.0.0', () => {
  console.log(`โ ุฎุงุฏู ุฅุนุงุฏุฉ ุงูุชูุฌูู ููุฏ ุงูุชุดุบูู ุนูู ุงููููุฐ ${REPLIT_EXPECTED_PORT}`);
  console.log(`๐ ูููู ุจุชูุฌูู ุงูุทูุจุงุช ุฅูู ุงููููุฐ ${ACTUAL_SERVER_PORT}`);
  
  // ุชุนููู ุฑุฃุณ ุฌุงูุฒูุฉ ุงููููุฐ ูู Replit
  console.log('X-Replit-Port-Ready: true');
});

// ุชุณุฌูู ูุจุถุงุช ุงูููุจ ููุชุฃูุฏ ูู ุฃู ุงูุนูููุฉ ูุดุทุฉ
setInterval(() => {
  console.log(`ุฎุงุฏู ุฅุนุงุฏุฉ ุงูุชูุฌูู ูุดุท: ${new Date().toISOString()}`);
}, 10000);
EOL

# ุชุดุบูู ุงูุฎุงุฏู ุงูุฃุณุงุณู (ูู ุงูุฎูููุฉ)
echo "3. ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู ุงูุฃุณุงุณู..."
NODE_ENV=development npm run dev &
SERVER_PID=$!

# ุงูุชุธุฑ ููููุงู
echo "4. ุงูุงูุชุธุงุฑ ูุจุฏุก ุชุดุบูู ุงูุฎุงุฏู ุงูุฃุณุงุณู..."
sleep 5

# ุชุดุบูู ุฎุงุฏู ุฅุนุงุฏุฉ ุงูุชูุฌูู
echo "5. ุจุฏุก ุฎุงุฏู ุฅุนุงุฏุฉ ุงูุชูุฌูู..."
node port_redirect.js &
PROXY_PID=$!

echo "6. ุชูุช ุฅุนุงุฏุฉ ุงูุชูุฌูู ุจูุฌุงุญ ูู ุงููููุฐ 5000 ุฅูู 3333"
echo "   ุงูุฎุงุฏู ุงูุฃุณุงุณู (PID: $SERVER_PID)"
echo "   ุฎุงุฏู ุฅุนุงุฏุฉ ุงูุชูุฌูู (PID: $PROXY_PID)"
echo "=== ุงูุชูุงู ุงูุฅุตูุงุญ ==="